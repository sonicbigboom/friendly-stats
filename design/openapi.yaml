openapi: 3.1.0
info:
  title: Friendly Stats - OpenAPI 3.1
  description: |-
    An api that lets friends track stats with one another. (Poker games, silly bets, gin rummy score, etc...)

  contact:
    email: friendly-stats@potrt.com
  license:
    name: MIT License
    url: https://opensource.org/license/MIT
  version: 1.0.0
servers:
  - url: https://localhost:8080
tags:
  - name: Authentication
    description: Authentication methods.
  - name: Me
    description: Logged-in user info.
  - name: Group
    description: Group info.
security:
  - bearerAuth: []
paths:
  /auth/login:
    post:
      tags:
        - Authentication
      security: []
      summary: Returns a JWT token.
      description: Logs in a user and returns a JWT token.
      requestBody:
        required: true
        description: The user's credentials.
        content:
          application/json:
            schema:
              type: object
              properties:
                loginName:
                  type: string
                authType:
                  type: string
                  enum:
                    - basic
                    - google
                code:
                  type: string
            examples:
              basic:
                summary: Basic
                description: Username + password authentication.
                value:
                  loginName: "sam13579@gmail.com"
                  authType: "basic"
                  code: "my$ecretPassw0rd"
              google:
                summary: Google
                description: Google authentication.
                value:
                  loginName: "joeistheman"
                  authType: "google"
                  code: "<google id token>"
      responses:
        '200':
          description: Successfully logged in.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  tokenType:
                    type: string
              examples:
                jwt:
                  summary: JWT Token
                  description: Returns a JWT authentication token to be used in the authentication header.
                  value:
                    accessToken: "<jwt authentication token>"
                    tokenType: "Bearer"
        '400':
          description: Received invalid data (loginName, authenticationType, etc...).
        '401':
          description: The credentials did not authenticate an account. This could mean either the username/email does not exist, or that authentication was incorrect.
        '500':
          description: There was an issue communicating with a third party authenticator.
  /auth/register:
    post:
      tags:
        - Authentication
      security: []
      summary: Registers a user account.
      description: Registers a user account with a user's info and credentials.
      parameters:
        - name: verificationUrl
          in: query
          description: A client url that will be emailed to the user with a verification code added to the end. This may be used to verify accounts through the client. If this is empty, the user will be directed directl to the api verification link.
          required: false
          schema:
            type: string
          examples:
            client:
              summary: Client
              description: Verify through client.
              value: "localhost:3000/verify?token="
      requestBody:
        required: true
        description: The user's info and credentials.
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
                firstName:
                  type: [string, 'null']
                lastName:
                  type: [string, 'null']
                nickname:
                  type: [string, 'null']
                authType:
                  type: string
                  enum:
                    - basic
                    - google
                code:
                  type: string
            examples:
              basic:
                summary: Basic
                description: Username + password registration.
                value:
                  email: "sam13579@gmail.com"
                  username: "sam13579"
                  firstName: "Sam"
                  lastName: "Peterson"
                  authType: "basic"
                  code: "my$ecretPassw0rd"
              google:
                summary: Google
                description: Google authentication.
                value:
                  email: "joe.anderson2001@gmail.com"
                  username: "joeistheman"
                  firstName: "Joe"
                  lastName: "Anderson"
                  nickName: "Joey"
                  authType: "google"
                  code: "<google id token>"
              minimum:
                summary: Minimum
                description: Simplest registration.
                value:
                  email: "anonymous891705@yahoo.com"
                  username: "anonymous891705"
                  authType: "basic"
                  code: "e%z]b6dwj9Y[@8hW*5!<Zv"
      responses:
        '201':
          description: Successfully registered. Note that this account's email must be verified to enable the account.
        '400':
          description: Received invalid data (username, email, authenticationType, etc...).
        '409':
          description: Account already exists.
        '500':
          description: Failed to send the verification email or failed to communicate with third party authenticator.
  /auth/verify:
    get:
      tags:
        - Authentication
      security: []
      summary: Verifies an email.
      description: Verifies a user's email and the associated account, allowing future authentication.
      parameters:
        - name: token
          in: query
          description: The verification token for the email.
          required: true
          schema:
            type: string
          examples:
            verify:
              summary: Verify
              description: Verify an account.
              value: "<verification token>"
      responses:
        '201':
          description: Successfully registered. Note that this account's email must be verified to enable the account.
        '422':
          description: Received a bad or expired verification token.
        '500':
          description: There was an issue communicating with a third party authenticator.
  /auth/reset:
    get:
      tags:
        - Authentication
      security: []
      summary: Emails a token to reset credentials.
      description: Sends a token to the given email that can be used for resetting the associated user's credentials. Note that this token only lasts 10 minutes.
      parameters:
        - name: email
          in: query
          description: The email 
          required: true
          schema:
            type: string
          examples:
            reset:
              summary: Reset
              description: Send a reset email.
              value: "sam13579@gmail.com"
      responses:
        '200':
          description: Sent the reset email.
        '404':
          description: The email is not associated with a user.
        '500':
          description: Failed to send the reset email.
    post:
      tags:
        - Authentication
      security: []
      summary: Resets a user's credentials.
      description: Reset a user's credentials with the given credentials and reset token.
      requestBody:
        required: true
        description: The user's token and new credentials.
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                email:
                  type: string
                authType:
                  type: string
                  enum:
                    - basic
                    - google
                code:
                  type: string
            examples:
              basic:
                summary: Basic
                description: Username + password reset authentication.
                value:
                  token: "<reset token>"
                  email: "sam13579@gmail.com"
                  authType: "basic"
                  code: "myNEW$ecretPassw0rd"
              google:
                summary: Google
                description: Google reset authentication.
                value:
                  token: "<reset token>"
                  email: "joe.anderson2001@gmail.com"
                  authType: "google"
                  code: "<different google account's id token>"
      responses:
        '201':
          description: Successfully reset credentials.
        '400':
          description: Received invalid data (email, authenticationType, etc...).
        '404':
          description: The email is not associated with a user.
        '422':
          description: Received a bad or expired reset token. Note that the reset token only lasts 10 minutes.
  /me:
    get:
      tags:
        - Me
      summary: Gets the caller's user info.
      description: Gets the logged in user's info.
      responses:
        '200':
          description: Successfully got the user info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized user.
  /balance:
    get:
      tags:
        - Me
      summary: Gets the caller's cash balance.
      description: Gets the logged in user's total cash balance, and total cash balance for groups the user is still a member of. Ideally, the user is not removed from groups that still owe/are owed money by the user. In this ideal, these values would be equal.
      responses:
        '200':
          description: Successfully got the user info.
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  membered:
                    type: integer
              examples:
                positive_ideal:
                  summary: Positive Ideal
                  description: The user is owed a total of $20 from the various clubs the user is in.
                  value:
                    total: 2000
                    membered: 2000
                negative_ideal:
                  summary: Negative Ideal
                  description: The user owes a total of $10 from the various clubs the user is in.
                  value:
                    total: -1000
                    membered: -1000
                removed:
                  summary: Removed
                  description: The user is owed a total of $15, but the user was removed from a group that owes the user $5.
                  value:
                    total: 1500
                    membered: 1000
        '401':
          description: Unauthorized user.
  /groups:
    get:
      tags:
        - Me
        - Group
      summary:  Gets the caller's groups.
      description: Gets all of the groups that the caller is a member of.
      responses:
        '200':
          description: Successfully got the groups. NOTE&#58; This endpoint will never return storedCash.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
              examples:
                friends:
                  summary: Friends
                  description: Sam's friends.
                  value:
                    - id: 3
                      name: My Friends
                      ownerPersonID: 5
                      storedCash: null
                    - id: 7
                      name: Joe's Friends
                      ownerPersonID: 9
                      storedCash: null
        '204':
          description: Succesful call, but the caller is not a member of any groups.
        '401':
          description: Unauthorized user.
  /users:
    get:
      tags:
        - Me
        - User
      summary:  Gets the application users.
      description: Gets all of the application users, filtered on the query parameter.
      parameters:
        - name: filter
          in: query
          description: The filter to search the users by.
          required: true
          schema:
            type: string
          examples:
            sam:
              summary: Sam
              description: Gets all users with 'sam' in their name.
              value: "sam"
      responses:
        '200':
          description: Successfully got the users. NOTE&#58; This endpoint will never return a user's email.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                sam:
                  summary: Sam
                  description: All the users with 'sam' in their name.
                  value:
                    - id: 5
                      email: null
                      username: "sam13579"
                      firstName: "Sam"
                      lastName: "Peterson"
                      nickname: null
                    - id: 15
                      email: null
                      username: "mcdonald44"
                      firstName: "Samuel"
                      lastName: "Mcdonald"
                      nickname: null
                    - id: 91
                      email: null
                      username: "sirsirsir"
                      firstName: "Swampson"
                      lastName: null
                      nickname: "Sammy"
        '204':
          description: Succesful call, but no users matched the filter.
        '401':
          description: Unauthorized user.
  /groups/{groupID}:
    get:
      tags:
        - Group
      summary:  Gets a group by id.
      description: Gets the info of a group by its ID.
      parameters:
        - name: groupID
          in: path
          description: The group ID.
          required: true
          schema:
            type: integer
          examples:
            friends:
              summary: Friends
              description: Sam's friends group id.
              value: 3
      responses:
        '200':
          description: Successfully got the group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
              examples:
                friends:
                  summary: Friends
                  description: Sam's friends.
                  value:
                    id: 3
                    name: My Friends
                    ownerPersonID: 5
                    storedCash: 2000
        '400':
          description: The group id was not a integer.
        '401':
          description: Unauthorized user.
        '403':
          description: The caller is not a member of this group.
        '404':
          description: No group found.
  /groups/{groupID}/users:
    get:
      tags:
        - Group
      summary:  Gets the members of a group.
      description: Gets a list of users who are members of the group.
      parameters:
        - name: groupID
          in: path
          description: The group ID.
          required: true
          schema:
            type: integer
          examples:
            friends:
              summary: Friends
              description: Sam's friends group id.
              value: 3
      responses:
        '200':
          description: Successfully got the users. NOTE&#58; This endpoint will never return a user's email.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '204':
          description: There are no members of this group. (This should not be possible.)
        '400':
          description: The group id was not a integer.
        '401':
          description: Unauthorized user.
        '403':
          description: The caller is not a member of this group.
        '404':
          description: No group found.
    post:
      tags:
        - Group
      summary:  Adds a user to a group.
      description: Adds a user to a group as a member.
      parameters:
        - name: groupID
          in: path
          description: The group ID.
          required: true
          schema:
            type: integer
          examples:
            friends:
              summary: Friends
              description: Sam's friends group id.
              value: 3
        - name: userID
          in: query
          description: The user id to add.
          required: true
          schema:
            type: integer
          examples:
            joe:
              summary: Joe
              description: Adds to Joe to Sam's friend group.
              value: 9
      responses:
        '201':
          description: Successfully added the user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: The group id or user id was not a integer.
        '401':
          description: Unauthorized user.
        '403':
          description: The caller is not a `Game Admin` of this group.
        '404':
          description: Group or user not found.
        '409':
          description: The user is already a member.
  /groups/{groupID}/users/create:
    post:
      tags:
        - Group
      summary:  Creates a new user for the group.
      description: Creates and adds a new user to a group as a member.
      parameters:
        - name: groupID
          in: path
          description: The group ID.
          required: true
          schema:
            type: integer
          examples:
            friends:
              summary: Friends
              description: Sam's friends group id.
              value: 3
      requestBody:
        required: true
        description: The new user's info.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Successfully created and added the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: The group id or user id was not a integer.
        '401':
          description: Unauthorized user.
        '403':
          description: The caller is not a `Game Admin` of this group.
        '404':
          description: Group not found.
        '409':
          description: The user already exists, or the user is already a member.

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: [string, 'null']
          description: This field may be security trimmed. Contains `null` if the caller is not the user.
        username:
          type: string
        firstName:
          type: [string, 'null']
        lastName:
          type: [string, 'null']
        nickname:
          type: [string, 'null']
      example:
        id: 5
        email: "sam13579@gmail.com"
        username: "sam13579"
        firstName: "Sam"
        lastName: "Peterson"
        nickname: null
    Group:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        ownerPersonID:
          type: integer
        storedCash:
          type: [integer, 'null']
          description: This field may be security trimmed. Contains `null` if the caller is not a `Cash Admin` for the group.
      example:
        id: 3
        name: My Friends
        ownerPersonID: 5
        storedCash: 2000
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT